{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Servicing API",
    "description": "API to get service details about customers"
  },
  "servers": [
    {
      "url": "host"
    }
  ],
  "tags": [
    {
      "name": "auth"
    },
    {
      "name": "customer_accounts"
    },
    {
      "name": "invoices"
    },
    {
      "name": "payments"
    },
    {
      "name": "service_accounts"
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "security": [],
        "tags": [
          "auth"
        ],
        "summary": "Authenticates user information and returns a JWT",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Username": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "access_token": "xxxxxx.yyyyyyy.zzzzzz",
                  "refresh_token": "xxxxxx.yyyyyyy.zzzzzz"
                }
              }
            }
          },
          "400": {
            "description": "Authentication failed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "Invalid password"
              }
            }
          }
        }
      }
    },
    "/auth/generate": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Generates a JWT for a user and allows setting the expiration time",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "description": "Name of the user who the token will be issued for",
                    "type": "string"
                  },
                  "Expires_In": {
                    "description": "Number of seconds for the token to live for.  Defaults to 1 day or 86,400 seconds.  Max is one day.",
                    "type": "integer",
                    "max": 86400
                  }
                },
                "required": [
                  "Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "access_token": "xxxxxx.yyyyyyy.zzzzzz",
                  "refresh_token": "xxxxxx.yyyyyyy.zzzzzz"
                }
              }
            }
          },
          "400": {
            "description": "Authentication failed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "Invalid jwt token"
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "security": [],
        "tags": [
          "auth"
        ],
        "summary": "Gets new access token using a refresh token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "xxxxxx.yyyyyyy.zzzzzz"
              }
            }
          },
          "400": {
            "description": "Authentication failed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "Invalid refresh token"
              }
            }
          }
        }
      }
    },
    "/auth/preauth": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Return the authenticated service account id based on the input phone number",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "$ref": "#/components/schemas/pre_auth_request"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Service_Account_Id": {
                      "description": "service account id of the pre authorized phone number",
                      "type": "string"
                    }
                  }
                },
                "example": "1234567"
              }
            }
          },
          "400": {
            "description": "Authentication failed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                },
                "example": "Invalid phone number"
              }
            }
          }
        }
      }
    },
    "/customer_accounts/{id}": {
      "get": {
        "tags": [
          "customer_accounts"
        ],
        "summary": "Retrieves customer information by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of customer to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns a customer account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_account"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "patch": {
        "tags": [
          "customer_accounts"
        ],
        "summary": "Updates customers email and/or primary phone number",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of customer to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_account_patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 returns a customer account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_account"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    },
    "/customer_accounts/{id}/pay_methods": {
      "get": {
        "tags": [
          "customer_accounts",
          "payments"
        ],
        "summary": "Retrieves payment methods for a customer by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of customer to fetch payment methods for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns a customer account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Id": {
                        "type": "integer"
                      },
                      "Active": {
                        "type": "boolean"
                      },
                      "Type": {
                        "type": "string",
                        "enum": [
                          "CreditCard",
                          "eCheck",
                          "Unknown"
                        ]
                      },
                      "CreditCard": {
                        "$ref": "./credit_card.json"
                      },
                      "BankAccount": {
                        "$ref": "./e_check.json"
                      }
                    },
                    "required": [
                      "Id",
                      "Active",
                      "Type"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No payment methods not found"
          }
        }
      }
    },
    "/service_accounts": {
      "get": {
        "tags": [
          "service_accounts"
        ],
        "summary": "Retrieves service account information by id",
        "parameters": [
          {
            "name": "service_account_id",
            "in": "query",
            "description": "id of service account to search by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_account_id",
            "in": "query",
            "description": "id of customer account to search by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns a service account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/service_account"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service Account not found"
          }
        }
      }
    },
    "/service_accounts/{id}": {
      "get": {
        "tags": [
          "service_accounts"
        ],
        "summary": "Retrieves service account information by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of service account to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns a service account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/service_account"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service Account not found"
          }
        }
      }
    },
    "/service_accounts/{id}/invoices": {
      "get": {
        "tags": [
          "service_accounts",
          "invoices"
        ],
        "summary": "Retrieves invoices by service account id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of service account to fetch invoices for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns a list of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/invoice"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service Account or Invoices Not Found"
          }
        }
      }
    },
    "/service_accounts/{id}/invoices/{invoice_id}": {
      "get": {
        "tags": [
          "service_accounts",
          "invoices"
        ],
        "summary": "Retrieve a single invoice by service account id and invoice id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of service account to fetch invoice for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "id of invoice to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns an invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service Account or Invoices Not Found"
          }
        }
      }
    },
    "/service_accounts/{id}/invoices/{invoice_id}/details": {
      "get": {
        "tags": [
          "service_accounts",
          "invoices"
        ],
        "summary": "Retrieve a single invoice by service account id and invoice id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of service account to fetch invoice for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "description": "id of invoice to fetch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns a list of invoice line items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/invoice_line_item"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service Account or Invoice Not Found"
          }
        }
      }
    },
    "/service_accounts/{id}/payment_extension": {
      "get": {
        "tags": [
          "service_accounts",
          "payments"
        ],
        "summary": "Retrieves payment extension status by service account id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of service account to fetch payment extension status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns a service account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payment_extension_status"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "service_accounts",
          "payments"
        ],
        "summary": "Requests for a payment extension towards the service account specified.  Will be set to 7 days past the action date unless extend is set to true in the request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of service account to request a payment extension for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/payment_extension_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 returns a service account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_extension_response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_extension_status_code"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/service_accounts/{id}/payments": {
      "get": {
        "tags": [
          "service_accounts",
          "payments"
        ],
        "summary": "Retrieves payments by service account id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of service account to fetch payments for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 returns a service account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payment_detail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service Account not found"
          }
        }
      },
      "post": {
        "tags": [
          "service_accounts",
          "payments"
        ],
        "summary": "Makes a payment towards the service account specified",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of service account to make a payment for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/payment_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 returns a service account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_confirmation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_list"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service Account not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "customer_account": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Date_Of_Birth": {
            "type": "string",
            "format": "date"
          },
          "Email": {
            "type": "string",
            "format": "email"
          },
          "Prefix": {
            "type": "string"
          },
          "Suffix": {
            "type": "string"
          },
          "First_Name": {
            "type": "string"
          },
          "Middle_Name": {
            "type": "string"
          },
          "Last_Name": {
            "type": "string"
          },
          "Language": {
            "type": "string"
          },
          "Past_Due": {
            "type": "number"
          },
          "Bad_Debt_Balance": {
            "type": "number"
          },
          "Pledge_On_Entity": {
            "type": "boolean"
          },
          "Primary_Phone": {
            "type": "object",
            "properties": {
              "Type": {
                "type": "string",
                "enum": [
                  "Landline",
                  "Mobile"
                ]
              },
              "Area_Code": {
                "type": "string",
                "minLength": 3,
                "maxLength": 3,
                "pattern": "^\\d{3}$"
              },
              "Number": {
                "type": "string",
                "minLength": 7,
                "maxLength": 7,
                "pattern": "^\\d{7}$"
              },
              "Extension": {
                "type": "string"
              },
              "Agree_To_Marketing": {
                "type": "boolean"
              }
            },
            "required": [
              "Type",
              "Area_Code",
              "Number"
            ]
          },
          "EnrolledInShareAndSave": {
            "type": "boolean"
          }
        }
      },
      "customer_account_patch": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "format": "email"
          },
          "Primary_Phone_Number": {
            "type": "object",
            "properties": {
              "Type": {
                "type": "string",
                "enum": [
                  "Landline",
                  "Mobile"
                ]
              },
              "Area_Code": {
                "type": "string",
                "minLength": 3,
                "maxLength": 3,
                "pattern": "^\\d{3}$"
              },
              "Number": {
                "type": "string",
                "minLength": 7,
                "maxLength": 7,
                "pattern": "^\\d{7}$"
              },
              "Extension": {
                "type": "string"
              },
              "Agree_To_Marketing": {
                "type": "boolean"
              }
            },
            "required": [
              "Type",
              "Area_Code",
              "Number"
            ]
          }
        }
      },
      "error_list": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "invoice": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Invoice_Date": {
            "type": "string",
            "format": "date"
          },
          "Due_Date": {
            "type": "string",
            "format": "date"
          },
          "Usage": {
            "type": "integer"
          },
          "Current_Charges": {
            "type": "number"
          },
          "Amount_Due": {
            "type": "number"
          },
          "Credit": {
            "type": "number"
          },
          "Balance_Forward": {
            "type": "number"
          }
        }
      },
      "invoice_line_item": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Amount": {
            "type": "number"
          },
          "UOM": {
            "type": "string"
          },
          "Quantity": {
            "type": "string"
          },
          "Multiplier": {
            "type": "number"
          },
          "Min": {
            "type": "integer"
          },
          "Max": {
            "type": "integer"
          },
          "Bill_Line_Item_Type": {
            "type": "string",
            "enum": [
              "GEXA",
              "TDSP",
              "DEPOSITS",
              "TAX"
            ]
          },
          "Bill_Line_Item_Sub_Type": {
            "type": "string",
            "enum": [
              "None",
              "Energy"
            ]
          }
        }
      },
      "payment_confirmation": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Confirmation_Number": {
            "type": "string"
          },
          "Approval_Status": {
            "type": "string"
          },
          "Settlement_Status": {
            "type": "string"
          }
        }
      },
      "payment_detail": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "Amount": {
            "type": "number"
          },
          "Status": {
            "type": "string"
          },
          "Method": {
            "type": "string"
          },
          "Account": {
            "type": "string"
          }
        }
      },
      "payment_extension_response": {
        "type": "object",
        "properties": {
          "Extended_Date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "payment_extension_request": {
        "type": "object",
        "properties": {
          "Extend": {
            "description": "Flag that indicates that the payment extension will be extended an extra 3 days past the normal 7",
            "type": "boolean"
          }
        }
      },
      "payment_extension_status": {
        "type": "object",
        "properties": {
          "Customer_Account_Id": {
            "type": "string"
          },
          "Disconnect_Letter_Info": {
            "type": "object",
            "properties": {
              "Id": {
                "type": "integer"
              },
              "Request_Date": {
                "type": "string",
                "format": "date"
              },
              "Disconnect_Notice_Sent_Date": {
                "type": "string",
                "format": "date"
              },
              "Disconnect_Action_Date": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "Past_Due": {
            "type": "number"
          },
          "Deposit_Balance": {
            "type": "number"
          },
          "Status": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "UNSUCCESSFUL",
              "NO_PAST_DUE_FOUND",
              "ALREADY_APPROVED",
              "DEPOSIT_CHARGE_FOUND",
              "FEWER_BILL_COUNT_FOUND",
              "NO_DISCONNECT_LETTER",
              "BALANCE_TRANSFER_FOUND",
              "NFS_FOUND",
              "DISCONNECT_ORDER_FOUND",
              "BROKEN_ARRANGEMENT_FOUND",
              "UNPAID_PAST_DUE",
              "UNPAID_ARRANGEMENT_DUE",
              "NONE_PAID_UNTIL_FOLLOW_UP_DATE",
              "EXCESSIVE_BROKEN_ARRANGEMENT_FOUND",
              "NON_PAYMENT_ORDER_FOUND",
              "EXPIRED_DISCONNECT_DATE",
              "NO_ACTION_DATE_FOUND",
              "DISCONNECT_NOTICE_NOT_ISSUED",
              "INSERT_EXTENSION_NOTES_FAILED",
              "CSP_NOT_ACTIVE",
              "CSP_STOP_REQUEST_FOUND",
              "NO_SUSPENSION_LETTER_ISSUED",
              "SUSPENSION_ORDER_ISSUED",
              "NON_PAYMENT_ORDER_FOUND_IN_LAST_SIX_MONTHS"
            ]
          },
          "Eligibility_Result": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "ELIGIBLE",
              "SOFT_STOP",
              "HARD_STOP"
            ]
          }
        }
      },
      "payment_extension_status_code": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "UNSUCCESSFUL",
          "NO_PAST_DUE_FOUND",
          "ALREADY_APPROVED",
          "DEPOSIT_CHARGE_FOUND",
          "FEWER_BILL_COUNT_FOUND",
          "NO_DISCONNECT_LETTER",
          "BALANCE_TRANSFER_FOUND",
          "NFS_FOUND",
          "DISCONNECT_ORDER_FOUND",
          "BROKEN_ARRANGEMENT_FOUND",
          "UNPAID_PAST_DUE",
          "UNPAID_ARRANGEMENT_DUE",
          "NONE_PAID_UNTIL_FOLLOW_UP_DATE",
          "EXCESSIVE_BROKEN_ARRANGEMENT_FOUND",
          "NON_PAYMENT_ORDER_FOUND",
          "EXPIRED_DISCONNECT_DATE",
          "NO_ACTION_DATE_FOUND",
          "DISCONNECT_NOTICE_NOT_ISSUED",
          "INSERT_EXTENSION_NOTES_FAILED",
          "CSP_NOT_ACTIVE",
          "CSP_STOP_REQUEST_FOUND",
          "NO_SUSPENSION_LETTER_ISSUED",
          "SUSPENSION_ORDER_ISSUED",
          "NON_PAYMENT_ORDER_FOUND_IN_LAST_SIX_MONTHS"
        ]
      },
      "payment_request": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "Amount": {
                    "type": "number",
                    "min": 10,
                    "max": 3000
                  }
                },
                "required": [
                  "Amount"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "One_Time_Token": {
                    "type": "string"
                  }
                },
                "required": [
                  "One_Time_Token"
                ]
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "Amount": {
                    "type": "number",
                    "min": 10,
                    "max": 3000
                  }
                },
                "required": [
                  "Amount"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "Pay_Method_Id": {
                    "type": "integer"
                  },
                  "Scheduled_Date": {
                    "type": "string",
                    "format": "date"
                  }
                },
                "required": [
                  "Pay_Method_Id"
                ]
              }
            ]
          }
        ]
      },
      "pre_auth_request": {
        "type": "object",
        "properties": {
          "Phone_Number": {
            "type": "string",
            "pattern": "^\\d{10}$"
          }
        }
      },
      "service_account": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Customer_Account_Id": {
            "type": "string"
          },
          "Past_Due": {
            "type": "number"
          },
          "Current_Due": {
            "type": "number"
          },
          "Deposit_Balance": {
            "type": "number"
          },
          "UAN": {
            "type": "string"
          },
          "TDU_Name": {
            "type": "string"
          },
          "TDU_DUNS_Number": {
            "type": "string"
          },
          "Service_Address": {
            "type": "object",
            "properties": {
              "Line_1": {
                "type": "string"
              },
              "Line_2": {
                "type": "string"
              },
              "City": {
                "type": "string",
                "pattern": "^[A-Za-z\\s\\-\\.]*$"
              },
              "State": {
                "type": "string",
                "enum": [
                  "AL",
                  "AK",
                  "AR",
                  "AZ",
                  "CA",
                  "CO",
                  "CT",
                  "DC",
                  "DE",
                  "FL",
                  "GA",
                  "HI",
                  "IA",
                  "ID",
                  "IL",
                  "IN",
                  "KS",
                  "KY",
                  "LA",
                  "MA",
                  "MD",
                  "ME",
                  "MI",
                  "MN",
                  "MO",
                  "MS",
                  "MT",
                  "NC",
                  "NE",
                  "NH",
                  "NJ",
                  "NM",
                  "NV",
                  "NY",
                  "ND",
                  "OH",
                  "OK",
                  "OR",
                  "PA",
                  "RI",
                  "SC",
                  "SD",
                  "TN",
                  "TX",
                  "UT",
                  "VT",
                  "VA",
                  "WA",
                  "WI",
                  "WV",
                  "WY"
                ]
              },
              "Zip": {
                "type": "string",
                "pattern": "^\\d{5}$"
              },
              "Zip_4": {
                "type": "string",
                "pattern": "^\\d{4}$"
              }
            },
            "required": [
              "Line_1",
              "City",
              "State",
              "Zip"
            ]
          },
          "Mailing_Address": {
            "type": "object",
            "properties": {
              "Line_1": {
                "type": "string"
              },
              "Line_2": {
                "type": "string"
              },
              "City": {
                "type": "string",
                "pattern": "^[A-Za-z\\s\\-\\.]*$"
              },
              "State": {
                "type": "string",
                "enum": [
                  "AL",
                  "AK",
                  "AR",
                  "AZ",
                  "CA",
                  "CO",
                  "CT",
                  "DC",
                  "DE",
                  "FL",
                  "GA",
                  "HI",
                  "IA",
                  "ID",
                  "IL",
                  "IN",
                  "KS",
                  "KY",
                  "LA",
                  "MA",
                  "MD",
                  "ME",
                  "MI",
                  "MN",
                  "MO",
                  "MS",
                  "MT",
                  "NC",
                  "NE",
                  "NH",
                  "NJ",
                  "NM",
                  "NV",
                  "NY",
                  "ND",
                  "OH",
                  "OK",
                  "OR",
                  "PA",
                  "RI",
                  "SC",
                  "SD",
                  "TN",
                  "TX",
                  "UT",
                  "VT",
                  "VA",
                  "WA",
                  "WI",
                  "WV",
                  "WY"
                ]
              },
              "Zip": {
                "type": "string",
                "pattern": "^\\d{5}$"
              },
              "Zip_4": {
                "type": "string",
                "pattern": "^\\d{4}$"
              }
            },
            "required": [
              "Line_1",
              "City",
              "State",
              "Zip"
            ]
          },
          "Paperless_CEN": {
            "type": "boolean"
          },
          "Paperless_Billing": {
            "type": "boolean"
          },
          "Budget_Billing": {
            "type": "boolean"
          },
          "Service_Stop_Request_date": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "type": "string",
            "enum": [
              "None",
              "Signed_Up",
              "Active",
              "Temporarily_Inactive",
              "Disconnected",
              "Suspended",
              "Voided",
              "Unapproved",
              "Rejected",
              "Approved",
              "Closed"
            ]
          },
          "Terminate_Switch": {
            "type": "boolean"
          },
          "Switch_Hold": {
            "type": "boolean"
          },
          "Service_Start_Date": {
            "type": "string",
            "format": "date-time"
          },
          "Service_Stop_Date": {
            "type": "string",
            "format": "date-time"
          },
          "Contract_Start_Date": {
            "type": "string",
            "format": "date-time"
          },
          "Contract_End_Date": {
            "type": "string",
            "format": "date-time"
          },
          "Is_Auto_Bill_Pay": {
            "type": "boolean"
          },
          "PayMethodId": {
            "type": "integer"
          },
          "AutoPayConfigId": {
            "type": "integer"
          },
          "Is_Happiness_Guaranteed": {
            "type": "boolean"
          },
          "Average_Usage": {
            "type": "integer"
          },
          "Zone": {
            "type": "string"
          },
          "Usage_Profile": {
            "type": "string",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Ultra_High"
            ]
          },
          "Current_Offer": {
            "type": "object",
            "properties": {
              "Rate_Code": {
                "type": "string"
              },
              "Client_Key": {
                "type": "string"
              },
              "Product_Name": {
                "type": "string"
              },
              "Product_Description": {
                "type": "string"
              },
              "RateAt500kwh": {
                "type": "number"
              },
              "RateAt1000kwh": {
                "type": "number"
              },
              "RateAt2000kwh": {
                "type": "number"
              },
              "Term": {
                "type": "integer"
              },
              "TDU_Name": {
                "type": "string"
              },
              "TDU_DUNS_Number": {
                "type": "string"
              },
              "Meter_Charge": {
                "type": "number"
              },
              "Delivery_Charge": {
                "type": "number"
              },
              "Family": {
                "type": "string",
                "enum": [
                  "LEVEL_1",
                  "LEVEL_2",
                  "LEVEL_3",
                  "LEVEL_4",
                  "LEVEL_5"
                ]
              },
              "Type": {
                "type": "string",
                "enum": [
                  "Acquisition",
                  "Renewal"
                ]
              },
              "Early_Termination_Fee": {
                "type": "number"
              },
              "Base_Charge": {
                "type": "number"
              },
              "Energy_Charges": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "Min": {
                      "type": "integer"
                    },
                    "Max": {
                      "type": "integer"
                    },
                    "Amount": {
                      "type": "number"
                    }
                  }
                }
              },
              "Usage_Credits": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "Min": {
                      "type": "integer"
                    },
                    "Max": {
                      "type": "integer"
                    },
                    "Amount": {
                      "type": "number"
                    }
                  }
                }
              },
              "Usage_Charges": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "Min": {
                      "type": "integer"
                    },
                    "Max": {
                      "type": "integer"
                    },
                    "Amount": {
                      "type": "number"
                    }
                  }
                }
              },
              "Start_Date": {
                "type": "string",
                "format": "date-time"
              },
              "End_Date": {
                "type": "string",
                "format": "date-time"
              },
              "Partner_Info": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "Partner": {
                      "type": "object",
                      "properties": {
                        "Id": {
                          "type": "string"
                        },
                        "Name": {
                          "type": "string"
                        },
                        "Description": {
                          "type": "string"
                        },
                        "Billing_Code": {
                          "type": "string"
                        },
                        "Creation_Time": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "Date_Created": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "Date_Last_Modified": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "Code": {
                      "type": "string"
                    }
                  }
                }
              },
              "Featured_Usage_Level": {
                "type": "string"
              },
              "IsHoldOverRate": {
                "type": "boolean"
              },
              "IsLegacyOffer": {
                "type": "boolean"
              },
              "IsFixed": {
                "type": "boolean"
              },
              "Has_Partner": {
                "type": "boolean"
              },
              "Cost_Components": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "Min": {
                      "type": "integer"
                    },
                    "Max": {
                      "type": "integer"
                    },
                    "Amount": {
                      "type": "number"
                    },
                    "Operation_Type": {
                      "type": "string",
                      "enum": [
                        "Additive",
                        "Multiplicative"
                      ]
                    },
                    "IsCompound": {
                      "type": "boolean"
                    },
                    "TimeOfUseInterval": {
                      "type": "string"
                    },
                    "DisplayContent": {
                      "type": "string"
                    }
                  }
                }
              },
              "Is_BOGO": {
                "type": "boolean"
              },
              "Is_TOU": {
                "type": "boolean"
              },
              "Is_RTP": {
                "type": "boolean"
              }
            }
          },
          "Offering_Name": {
            "type": "string"
          },
          "Tos_Fee_Id": {
            "type": "integer"
          }
        }
      },
      "service_account_auth_request": {
        "type": "object",
        "properties": {
          "Last_Four": {
            "type": "string"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}